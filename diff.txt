diff --git a/src/game/collision.cpp b/src/game/collision.cpp
index 99034a4..92e98ab 100644
--- a/src/game/collision.cpp
+++ b/src/game/collision.cpp
@@ -32,7 +32,7 @@ CCollision::CCollision()
 
 void CCollision::Init(class CLayers *pLayers)
 {
-	if(m_pLayers) m_pLayers->Dest();
+	if (m_pLayers) m_pLayers->Dest();
 	Dest();
 	m_NumSwitchers = 0;
 	m_pLayers = pLayers;
@@ -40,21 +40,21 @@ void CCollision::Init(class CLayers *pLayers)
 	m_Height = m_pLayers->GameLayer()->m_Height;
 	m_pTiles = static_cast<CTile *>(m_pLayers->Map()->GetData(m_pLayers->GameLayer()->m_Data));
 
-	if(m_pLayers->TeleLayer())
+	if (m_pLayers->TeleLayer())
 	{
 		unsigned int Size = m_pLayers->Map()->GetUncompressedDataSize(m_pLayers->TeleLayer()->m_Tele);
 		if (Size >= m_Width*m_Height*sizeof(CTeleTile))
 			m_pTele = static_cast<CTeleTile *>(m_pLayers->Map()->GetData(m_pLayers->TeleLayer()->m_Tele));
 	}
 
-	if(m_pLayers->SpeedupLayer())
+	if (m_pLayers->SpeedupLayer())
 	{
 		unsigned int Size = m_pLayers->Map()->GetUncompressedDataSize(m_pLayers->SpeedupLayer()->m_Speedup);
 		if (Size >= m_Width*m_Height*sizeof(CSpeedupTile))
 			m_pSpeedup = static_cast<CSpeedupTile *>(m_pLayers->Map()->GetData(m_pLayers->SpeedupLayer()->m_Speedup));
 	}
 
-	if(m_pLayers->SwitchLayer())
+	if (m_pLayers->SwitchLayer())
 	{
 		unsigned int Size = m_pLayers->Map()->GetUncompressedDataSize(m_pLayers->SwitchLayer()->m_Switch);
 		if (Size >= m_Width*m_Height*sizeof(CSwitchTile))
@@ -69,103 +69,50 @@ void CCollision::Init(class CLayers *pLayers)
 		m_pSwitchers = 0;
 	}
 
-	if(m_pLayers->TuneLayer())
-		{
+	if (m_pLayers->TuneLayer())
+	{
 		unsigned int Size = m_pLayers->Map()->GetUncompressedDataSize(m_pLayers->TuneLayer()->m_Tune);
 		if (Size >= m_Width*m_Height*sizeof(CTuneTile))
 			m_pTune = static_cast<CTuneTile *>(m_pLayers->Map()->GetData(m_pLayers->TuneLayer()->m_Tune));
-		}
+	}
 
-	if(m_pLayers->FrontLayer())
+	if (m_pLayers->FrontLayer())
 	{
 		unsigned int Size = m_pLayers->Map()->GetUncompressedDataSize(m_pLayers->FrontLayer()->m_Front);
 		if (Size >= m_Width*m_Height*sizeof(CTile))
 			m_pFront = static_cast<CTile *>(m_pLayers->Map()->GetData(m_pLayers->FrontLayer()->m_Front));
 	}
 
-	for(int i = 0; i < m_Width*m_Height; i++)
+	for (int i = 0; i < m_Width*m_Height; i++)
 	{
 		int Index;
-		if(m_pSwitch)
+		if (m_pSwitch)
 		{
-			if(m_pSwitch[i].m_Number > m_NumSwitchers)
+			if (m_pSwitch[i].m_Number > m_NumSwitchers)
 				m_NumSwitchers = m_pSwitch[i].m_Number;
 
-			if(m_pSwitch[i].m_Number)
+			if (m_pSwitch[i].m_Number)
 				m_pDoor[i].m_Number = m_pSwitch[i].m_Number;
 			else
 				m_pDoor[i].m_Number = 0;
 
 			Index = m_pSwitch[i].m_Type;
 
-			if(Index <= TILE_NPH_START)
+			if (Index <= TILE_NPH_START)
 			{
-				if(Index >= TILE_JUMP && Index <= TILE_BONUS)
+				if (Index >= TILE_JUMP && Index <= TILE_BONUS)
 					m_pSwitch[i].m_Type = Index;
 				else
 					m_pSwitch[i].m_Type = 0;
 			}
 		}
-		if(m_pFront)
-		{
-			Index = m_pFront[i].m_Index;
-
-			if(Index <= TILE_END_CUSTOM)
-			{
-				switch(Index)
-				{
-				case TILE_DEATH:
-					m_pFront[i].m_Index = COLFLAG_DEATH;
-					break;
-				case TILE_SOLID:
-					m_pFront[i].m_Index = 0;
-					break;
-				case TILE_NOHOOK:
-					m_pFront[i].m_Index = 0;
-					break;
-				case TILE_NOLASER:
-					m_pFront[i].m_Index = TILE_NOLASER;
-					break;
-				default:
-					m_pFront[i].m_Index = 0;
-				}
-
-				// DDRace tiles
-				if(Index == TILE_THROUGH || Index == TILE_FREEZE || (Index >= TILE_MONEY && Index <= TILE_END_CUSTOM) || (Index >= TILE_UNFREEZE && Index <= TILE_DUNFREEZE) || (Index >= TILE_WALLJUMP && Index <= TILE_SOLO_END) || (Index >= TILE_REFILL_JUMPS && Index <= TILE_STOPA) || Index == TILE_CP || Index == TILE_CP_F || (Index >= TILE_OLDLASER && Index <= TILE_NPH) || (Index >= TILE_NPC_END && Index <= TILE_NPH_END) || (Index >= TILE_NPC_START && Index <= TILE_NPH_START))
-					m_pFront[i].m_Index = Index;
-			}
-		}
-		Index = m_pTiles[i].m_Index;
-		if(Index <= TILE_END_CUSTOM)
-		{
-			switch(Index)
-			{
-			case TILE_DEATH:
-				m_pTiles[i].m_Index = COLFLAG_DEATH;
-				break;
-			case TILE_SOLID:
-				m_pTiles[i].m_Index = COLFLAG_SOLID;
-				break;
-			case TILE_NOHOOK:
-				m_pTiles[i].m_Index = COLFLAG_SOLID|COLFLAG_NOHOOK;
-				break;
-			case TILE_NOLASER:
-				m_pTiles[i].m_Index = TILE_NOLASER;
-				break;
-			default:
-				m_pTiles[i].m_Index = 0;
-			}
-
-			// DDRace tiles
-			if(Index == TILE_THROUGH || Index == TILE_FREEZE || (Index >= TILE_MONEY && Index <= TILE_END_CUSTOM) || (Index >= TILE_UNFREEZE && Index <= TILE_DUNFREEZE) || (Index >= TILE_WALLJUMP && Index <= TILE_SOLO_END) || (Index >= TILE_REFILL_JUMPS && Index <= TILE_STOPA) || Index == TILE_CP || Index == TILE_CP_F || (Index >= TILE_OLDLASER && Index <= TILE_NPH) || (Index >= TILE_NPC_END && Index <= TILE_NPH_END) || (Index >= TILE_NPC_START && Index <= TILE_NPH_START))
-				m_pTiles[i].m_Index = Index;
-		}
 	}
-	if(m_NumSwitchers)
+
+	if (m_NumSwitchers)
 	{
-		m_pSwitchers = new SSwitchers[m_NumSwitchers+1];
+		m_pSwitchers = new SSwitchers[m_NumSwitchers + 1];
 
-		for (int i = 0; i < m_NumSwitchers+1; ++i)
+		for (int i = 0; i < m_NumSwitchers + 1; ++i)
 		{
 			m_pSwitchers[i].m_Initial = true;
 			for (int j = 0; j < MAX_CLIENTS; ++j)
@@ -239,140 +186,136 @@ bool CCollision::IsTileSolid(int x, int y)
 }
 */
 // TODO: rewrite this smarter!
-int CCollision::IntersectLine(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, bool AllowThrough)
+int CCollision::IntersectLine(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision)
 {
 	float Distance = distance(Pos0, Pos1);
-	int End(Distance+1);
+	int End(Distance + 1);
 	vec2 Last = Pos0;
 	int ix = 0, iy = 0; // Temporary position for checking collision
-	int dx = 0, dy = 0; // Offset for checking the "through" tile
-	if (AllowThrough)
-		{
-			ThroughOffset(Pos0, Pos1, &dx, &dy);
-		}
-	for(int i = 0; i <= End; i++)
+	for (int i = 0; i <= End; i++)
 	{
-		float a = i/(float)End;
+		float a = i / (float)End;
 		vec2 Pos = mix(Pos0, Pos1, a);
 		ix = round_to_int(Pos.x);
 		iy = round_to_int(Pos.y);
 
-		if((CheckPoint(ix, iy) && !(AllowThrough && IsThrough(ix + dx, iy + dy))))
+		if (CheckPoint(ix, iy))
 		{
-			if(pOutCollision)
+			if (pOutCollision)
 				*pOutCollision = Pos;
-			if(pOutBeforeCollision)
+			if (pOutBeforeCollision)
 				*pOutBeforeCollision = Last;
 			return GetCollisionAt(ix, iy);
 		}
 
 		Last = Pos;
 	}
-	if(pOutCollision)
+	if (pOutCollision)
 		*pOutCollision = Pos1;
-	if(pOutBeforeCollision)
+	if (pOutBeforeCollision)
 		*pOutBeforeCollision = Pos1;
 	return 0;
 }
 
-int CCollision::IntersectLineTeleHook(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr, bool AllowThrough)
+
+int CCollision::IntersectLineTeleHook(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr)
 {
 	float Distance = distance(Pos0, Pos1);
-	int End(Distance+1);
+	int End(Distance + 1);
 	vec2 Last = Pos0;
 	int ix = 0, iy = 0; // Temporary position for checking collision
 	int dx = 0, dy = 0; // Offset for checking the "through" tile
-	if (AllowThrough)
-		{
-			ThroughOffset(Pos0, Pos1, &dx, &dy);
-		}
-	for(int i = 0; i <= End; i++)
+	ThroughOffset(Pos0, Pos1, &dx, &dy);
+	for (int i = 0; i <= End; i++)
 	{
-		float a = i/(float)End;
+		float a = i / (float)End;
 		vec2 Pos = mix(Pos0, Pos1, a);
 		ix = round_to_int(Pos.x);
 		iy = round_to_int(Pos.y);
 
-		int Nx = clamp(ix/32, 0, m_Width-1);
-		int Ny = clamp(iy/32, 0, m_Height-1);
+		int Index = GetPureMapIndex(Pos);
 		if (g_Config.m_SvOldTeleportHook)
-			*pTeleNr = IsTeleport(Ny*m_Width+Nx);
+			*pTeleNr = IsTeleport(Index);
 		else
-			*pTeleNr = IsTeleportHook(Ny*m_Width+Nx);
-		if(*pTeleNr)
+			*pTeleNr = IsTeleportHook(Index);
+		if (*pTeleNr)
 		{
-			if(pOutCollision)
+			if (pOutCollision)
 				*pOutCollision = Pos;
-			if(pOutBeforeCollision)
+			if (pOutBeforeCollision)
 				*pOutBeforeCollision = Last;
-			return COLFLAG_TELE;
+			return TILE_TELEINHOOK;
 		}
 
-		if((CheckPoint(ix, iy) && !(AllowThrough && IsThrough(ix + dx, iy + dy))))
+		int hit = 0;
+		if (CheckPoint(ix, iy))
 		{
-			if(pOutCollision)
+			if (!IsThrough(ix, iy, dx, dy, Pos0, Pos1))
+				hit = GetCollisionAt(ix, iy);
+		}
+		else if (IsHookBlocker(ix, iy, Pos0, Pos1))
+		{
+			hit = TILE_NOHOOK;
+		}
+		if (hit)
+		{
+			if (pOutCollision)
 				*pOutCollision = Pos;
-			if(pOutBeforeCollision)
+			if (pOutBeforeCollision)
 				*pOutBeforeCollision = Last;
-			return GetCollisionAt(ix, iy);
+			return hit;
 		}
 
 		Last = Pos;
 	}
-	if(pOutCollision)
+	if (pOutCollision)
 		*pOutCollision = Pos1;
-	if(pOutBeforeCollision)
+	if (pOutBeforeCollision)
 		*pOutBeforeCollision = Pos1;
 	return 0;
 }
 
-int CCollision::IntersectLineTeleWeapon(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr, bool AllowThrough)
+int CCollision::IntersectLineTeleWeapon(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr)
 {
 	float Distance = distance(Pos0, Pos1);
-	int End(Distance+1);
+	int End(Distance + 1);
 	vec2 Last = Pos0;
 	int ix = 0, iy = 0; // Temporary position for checking collision
-	int dx = 0, dy = 0; // Offset for checking the "through" tile
-	if (AllowThrough)
-		{
-			ThroughOffset(Pos0, Pos1, &dx, &dy);
-		}
-	for(int i = 0; i <= End; i++)
+	for (int i = 0; i <= End; i++)
 	{
-		float a = i/(float)End;
+		float a = i / (float)End;
 		vec2 Pos = mix(Pos0, Pos1, a);
 		ix = round_to_int(Pos.x);
 		iy = round_to_int(Pos.y);
 
-		int Nx = clamp(ix/32, 0, m_Width-1);
-		int Ny = clamp(iy/32, 0, m_Height-1);
+		int Index = GetPureMapIndex(Pos);
 		if (g_Config.m_SvOldTeleportWeapons)
-			*pTeleNr = IsTeleport(Ny*m_Width+Nx);
+			*pTeleNr = IsTeleport(Index);
 		else
-			*pTeleNr = IsTeleportWeapon(Ny*m_Width+Nx);
-		if(*pTeleNr)
+			*pTeleNr = IsTeleportWeapon(Index);
+		if (*pTeleNr)
 		{
-			if(pOutCollision)
+			if (pOutCollision)
 				*pOutCollision = Pos;
-			if(pOutBeforeCollision)
+			if (pOutBeforeCollision)
 				*pOutBeforeCollision = Last;
-			return COLFLAG_TELE;
+			return TILE_TELEINWEAPON;
 		}
 
-		if((CheckPoint(ix, iy) && !(AllowThrough && IsThrough(ix + dx, iy + dy))))
+		if (CheckPoint(ix, iy))
 		{
-			if(pOutCollision)
+			if (pOutCollision)
 				*pOutCollision = Pos;
-			if(pOutBeforeCollision)
+			if (pOutBeforeCollision)
 				*pOutBeforeCollision = Last;
 			return GetCollisionAt(ix, iy);
 		}
 
 		Last = Pos;
 	}
-	if(pOutCollision)
+	if (pOutCollision)
 		*pOutCollision = Pos1;
-	if(pOutBeforeCollision)
+	if (pOutBeforeCollision)
 		*pOutBeforeCollision = Pos1;
 	return 0;
 }
@@ -514,19 +457,41 @@ int CCollision::IsSolid(int x, int y)
 	return (GetTile(x,y)&COLFLAG_SOLID);
 }
 
-int CCollision::IsThrough(int x, int y)
+bool CCollision::IsThrough(int x, int y, int xoff, int yoff, vec2 pos0, vec2 pos1)
 {
-	int Nx = clamp(x/32, 0, m_Width-1);
-	int Ny = clamp(y/32, 0, m_Height-1);
-	int Index = m_pTiles[Ny*m_Width+Nx].m_Index;
-	int Findex = 0;
-	if (m_pFront)
-		Findex = m_pFront[Ny*m_Width+Nx].m_Index;
-	if (Index == TILE_THROUGH)
-		return Index;
-	if (Findex == TILE_THROUGH)
-		return Findex;
-	return 0;
+	int pos = GetPureMapIndex(x, y);
+	if (m_pFront && (m_pFront[pos].m_Index == TILE_THROUGH_ALL))
+		return true;
+	if (m_pFront && m_pFront[pos].m_Index == TILE_THROUGH_DIR && (
+		(m_pFront[pos].m_Flags == ROTATION_0   && pos0.y > pos1.y) ||
+		(m_pFront[pos].m_Flags == ROTATION_90  && pos0.x < pos1.x) ||
+		(m_pFront[pos].m_Flags == ROTATION_180 && pos0.y < pos1.y) ||
+		(m_pFront[pos].m_Flags == ROTATION_270 && pos0.x > pos1.x)))
+		return true;
+	int offpos = GetPureMapIndex(x + xoff, y + yoff);
+	if (m_pTiles[offpos].m_Index == TILE_THROUGH || (m_pFront && m_pFront[offpos].m_Index == TILE_THROUGH))
+		return true;
+	return false;
+}
+
+bool CCollision::IsHookBlocker(int x, int y, vec2 pos0, vec2 pos1)
+{
+	int pos = GetPureMapIndex(x, y);
+	if (m_pTiles[pos].m_Index == TILE_THROUGH_ALL || (m_pFront && m_pFront[pos].m_Index == TILE_THROUGH_ALL))
+		return true;
+	if (m_pTiles[pos].m_Index == TILE_THROUGH_DIR && (
+		(m_pTiles[pos].m_Flags == ROTATION_0   && pos0.y < pos1.y) ||
+		(m_pTiles[pos].m_Flags == ROTATION_90  && pos0.x > pos1.x) ||
+		(m_pTiles[pos].m_Flags == ROTATION_180 && pos0.y > pos1.y) ||
+		(m_pTiles[pos].m_Flags == ROTATION_270 && pos0.x < pos1.x)))
+		return true;
+	if (m_pFront && m_pFront[pos].m_Index == TILE_THROUGH_DIR && (
+		(m_pFront[pos].m_Flags == ROTATION_0   && pos0.y < pos1.y) ||
+		(m_pFront[pos].m_Flags == ROTATION_90  && pos0.x > pos1.x) ||
+		(m_pFront[pos].m_Flags == ROTATION_180 && pos0.y > pos1.y) ||
+		(m_pFront[pos].m_Flags == ROTATION_270 && pos0.x < pos1.x)))
+		return true;
+	return false;
 }
 
 int CCollision::IsWallJump(int Index)
@@ -750,10 +715,10 @@ vec2 CCollision::CpSpeed(int Index, int Flags)
 	return target;
 }
 
-int CCollision::GetPureMapIndex(vec2 Pos)
+int CCollision::GetPureMapIndex(float x, float y)
 {
-	int Nx = clamp((int)Pos.x/32, 0, m_Width-1);
-	int Ny = clamp((int)Pos.y/32, 0, m_Height-1);
+	int Nx = clamp(round_to_int(x)/32, 0, m_Width-1);
+	int Ny = clamp(round_to_int(y)/32, 0, m_Height-1);
 	return Ny*m_Width+Nx;
 }
 
@@ -1030,7 +995,7 @@ int CCollision::Entity(int x, int y, int Layer)
 			default:
 				str_format(aBuf,sizeof(aBuf), "Unknown");
 		}
-		dbg_msg("CCollision::Entity","Something is VERY wrong with the %s layer please report this at http://ddnet.tw, you will need to post the map as well and any steps that u think may have led to this", aBuf);
+		dbg_msg("CCollision::Entity","Something is VERY wrong with the %s layer please report this to ChillderDragon or other admins!", aBuf);
 		return 0;
 	}
 	switch (Layer)
diff --git a/src/game/collision.h b/src/game/collision.h
index 017a769..d050507 100644
--- a/src/game/collision.h
+++ b/src/game/collision.h
@@ -15,9 +15,6 @@ class CCollision
 	int m_Height;
 	class CLayers *m_pLayers;
 
-	//bool IsTileSolid(int x, int y);
-	//int GetTile(int x, int y);
-
 public:
 	enum
 	{
@@ -37,9 +34,9 @@ public:
 	int GetCollisionAt(float x, float y) { return GetTile(round_to_int(x), round_to_int(y)); }
 	int GetWidth() { return m_Width; };
 	int GetHeight() { return m_Height; };
-	int IntersectLine(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, bool AllowThrough);
-	int IntersectLineTeleWeapon(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr, bool AllowThrough);
-	int IntersectLineTeleHook(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr, bool AllowThrough);
+	int IntersectLine(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision);
+	int IntersectLineTeleWeapon(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr);
+	int IntersectLineTeleHook(vec2 Pos0, vec2 Pos1, vec2 *pOutCollision, vec2 *pOutBeforeCollision, int *pTeleNr);
 	void MovePoint(vec2 *pInoutPos, vec2 *pInoutVel, float Elasticity, int *pBounces);
 	void MoveBox(vec2 *pInoutPos, vec2 *pInoutVel, vec2 Size, float Elasticity);
 	bool TestBox(vec2 Pos, vec2 Size);
@@ -65,7 +62,8 @@ public:
 	int GetTile(int x, int y);
 	int GetFTile(int x, int y);
 	int Entity(int x, int y, int Layer);
-	int GetPureMapIndex(vec2 Pos);
+	int GetPureMapIndex(float x, float y);
+	int GetPureMapIndex(vec2 Pos) { return GetPureMapIndex(Pos.x, Pos.y); }
 	std::list<int> GetMapIndices(vec2 PrevPos, vec2 Pos, unsigned MaxIndices = 0);
 	int GetMapIndex(vec2 Pos);
 	bool TileExists(int Index);
@@ -91,7 +89,8 @@ public:
 	int GetSwitchDelay(int Index);
 
 	int IsSolid(int x, int y);
-	int IsThrough(int x, int y);
+	bool IsThrough(int x, int y, int xoff, int yoff, vec2 pos0, vec2 pos1);
+	bool IsHookBlocker(int x, int y, vec2 pos0, vec2 pos1);
 	int IsWallJump(int Index);
 	int IsNoLaser(int x, int y);
 	int IsFNoLaser(int x, int y);
diff --git a/src/game/gamecore.cpp b/src/game/gamecore.cpp
index 9d5a3a1..a71643c 100644
--- a/src/game/gamecore.cpp
+++ b/src/game/gamecore.cpp
@@ -131,12 +131,11 @@ void CCharacterCore::Tick(bool UseInput, bool IsClient)
 		}
 
 	float PhysSize = 28.0f;
-	int MapIndex = Collision()->GetPureMapIndex(m_Pos);;
+	int MapIndex = Collision()->GetPureMapIndex(m_Pos);
 	int MapIndexL = Collision()->GetPureMapIndex(vec2(m_Pos.x + (28/2)+4,m_Pos.y));
 	int MapIndexR = Collision()->GetPureMapIndex(vec2(m_Pos.x - (28/2)-4,m_Pos.y));
 	int MapIndexT = Collision()->GetPureMapIndex(vec2(m_Pos.x,m_Pos.y + (28/2)+4));
 	int MapIndexB = Collision()->GetPureMapIndex(vec2(m_Pos.x,m_Pos.y - (28/2)-4));
-	//dbg_msg("","N%d L%d R%d B%d T%d",MapIndex,MapIndexL,MapIndexR,MapIndexB,MapIndexT);
 	m_TileIndex = Collision()->GetTileIndex(MapIndex);
 	m_TileFlags = Collision()->GetTileFlags(MapIndex);
 	m_TileIndexL = Collision()->GetTileIndex(MapIndexL);
@@ -298,7 +297,7 @@ void CCharacterCore::Tick(bool UseInput, bool IsClient)
 		bool GoingToRetract = false;
 		bool GoingThroughTele = false;
 		int teleNr = 0;
-		int Hit = m_pCollision->IntersectLineTeleHook(m_HookPos, NewPos, &NewPos, 0, &teleNr, true);
+		int Hit = m_pCollision->IntersectLineTeleHook(m_HookPos, NewPos, &NewPos, 0, &teleNr);
 
 		//m_NewHook = false;
 
@@ -583,24 +582,6 @@ void CCharacterCore::Tick(bool UseInput, bool IsClient)
 
 				Temp.x = SaturatedAdd(-DragSpeed, DragSpeed, FlagVel.x, Accel*Dir.x*1.5f);
 				Temp.y = SaturatedAdd(-DragSpeed, DragSpeed, FlagVel.y, Accel*Dir.y*1.5f);
-
-				/*int FMapIndex = Collision()->GetPureMapIndex(FPos);int FMapIndexL = Collision()->GetPureMapIndex(vec2(FPos.x + (28/2)+4,FPos.y));int FMapIndexR = Collision()->GetPureMapIndex(vec2(FPos.x - (28/2)-4,FPos.y));int FMapIndexT = Collision()->GetPureMapIndex(vec2(FPos.x,FPos.y + (28/2)+4));int FMapIndexB = Collision()->GetPureMapIndex(vec2(FPos.x,FPos.y - (28/2)-4));
-				
-				int m_FTileIndex = Collision()->GetTileIndex(FMapIndex);int m_FTileFlags = Collision()->GetTileFlags(FMapIndex);int m_FTileIndexL = Collision()->GetTileIndex(FMapIndexL);int m_FTileFlagsL = Collision()->GetTileFlags(FMapIndexL);int m_FTileIndexR = Collision()->GetTileIndex(FMapIndexR);
-				int m_FTileFlagsR = Collision()->GetTileFlags(FMapIndexR);int m_FTileIndexB = Collision()->GetTileIndex(FMapIndexB);int m_FTileFlagsB = Collision()->GetTileFlags(FMapIndexB);int m_FTileIndexT = Collision()->GetTileIndex(FMapIndexT);int m_FTileFlagsT = Collision()->GetTileFlags(FMapIndexT);
-				int m_FTileFIndex = Collision()->GetFTileIndex(FMapIndex);int m_FTileFFlags = Collision()->GetFTileFlags(FMapIndex);int m_FTileFIndexL = Collision()->GetFTileIndex(FMapIndexL);int m_FTileFFlagsL = Collision()->GetFTileFlags(FMapIndexL);int m_FTileFIndexR = Collision()->GetFTileIndex(FMapIndexR);int m_FTileFFlagsR = Collision()->GetFTileFlags(FMapIndexR);
-				int m_FTileFIndexB = Collision()->GetFTileIndex(FMapIndexB);int m_FTileFFlagsB = Collision()->GetFTileFlags(FMapIndexB);int m_FTileFIndexT = Collision()->GetFTileIndex(FMapIndexT);int m_FTileFFlagsT = Collision()->GetFTileFlags(FMapIndexT);int m_FTileSIndex = (UseInput && IsRightTeam(FMapIndex))?Collision()->GetDTileIndex(FMapIndex):0;int m_FTileSFlags = (UseInput && IsRightTeam(FMapIndex))?Collision()->GetDTileFlags(FMapIndex):0;
-				int m_FTileSIndexL = (UseInput && IsRightTeam(FMapIndexL))?Collision()->GetDTileIndex(FMapIndexL):0;int m_FTileSFlagsL = (UseInput && IsRightTeam(FMapIndexL))?Collision()->GetDTileFlags(FMapIndexL):0;int m_FTileSIndexR = (UseInput && IsRightTeam(FMapIndexR))?Collision()->GetDTileIndex(FMapIndexR):0;int m_FTileSFlagsR = (UseInput && IsRightTeam(FMapIndexR))?Collision()->GetDTileFlags(FMapIndexR):0;
-				int m_FTileSIndexB = (UseInput && IsRightTeam(FMapIndexB))?Collision()->GetDTileIndex(FMapIndexB):0;int m_FTileSFlagsB = (UseInput && IsRightTeam(FMapIndexB))?Collision()->GetDTileFlags(FMapIndexB):0;int m_FTileSIndexT = (UseInput && IsRightTeam(FMapIndexT))?Collision()->GetDTileIndex(FMapIndexT):0;int m_FTileSFlagsT = (UseInput && IsRightTeam(FMapIndexT))?Collision()->GetDTileFlags(FMapIndexT):0;
-
-				if(Temp.x > 0 && ((m_FTileIndex == TILE_STOP && m_FTileFlags == ROTATION_270) || (m_FTileIndexL == TILE_STOP && m_FTileFlagsL == ROTATION_270) || (m_FTileIndexL == TILE_STOPS && (m_FTileFlagsL == ROTATION_90 || m_FTileFlagsL ==ROTATION_270)) || (m_FTileIndexL == TILE_STOPA) || (m_FTileFIndex == TILE_STOP && m_FTileFFlags == ROTATION_270) || (m_FTileFIndexL == TILE_STOP && m_FTileFFlagsL == ROTATION_270) || (m_FTileFIndexL == TILE_STOPS && (m_FTileFFlagsL == ROTATION_90 || m_FTileFFlagsL == ROTATION_270)) || (m_FTileFIndexL == TILE_STOPA) || (m_FTileSIndex == TILE_STOP && m_FTileSFlags == ROTATION_270) || (m_FTileSIndexL == TILE_STOP && m_FTileSFlagsL == ROTATION_270) || (m_FTileSIndexL == TILE_STOPS && (m_FTileSFlagsL == ROTATION_90 || m_FTileSFlagsL == ROTATION_270)) || (m_FTileSIndexL == TILE_STOPA)))
-					Temp.x = 0;
-				if(Temp.x < 0 && ((m_FTileIndex == TILE_STOP && m_FTileFlags == ROTATION_90) || (m_FTileIndexR == TILE_STOP && m_FTileFlagsR == ROTATION_90) || (m_FTileIndexR == TILE_STOPS && (m_FTileFlagsR == ROTATION_90 || m_FTileFlagsR == ROTATION_270)) || (m_FTileIndexR == TILE_STOPA) || (m_FTileFIndex == TILE_STOP && m_FTileFFlags == ROTATION_90) || (m_FTileFIndexR == TILE_STOP && m_FTileFFlagsR == ROTATION_90) || (m_FTileFIndexR == TILE_STOPS && (m_FTileFFlagsR == ROTATION_90 || m_FTileFFlagsR == ROTATION_270)) || (m_FTileFIndexR == TILE_STOPA) || (m_FTileSIndex == TILE_STOP && m_FTileSFlags == ROTATION_90) || (m_FTileSIndexR == TILE_STOP && m_FTileSFlagsR == ROTATION_90) || (m_FTileSIndexR == TILE_STOPS && (m_FTileSFlagsR == ROTATION_90 || m_FTileSFlagsR == ROTATION_270)) || (m_FTileSIndexR == TILE_STOPA)))
-					Temp.x = 0;
-				if(Temp.y < 0 && ((m_FTileIndex == TILE_STOP && m_FTileFlags == ROTATION_180) || (m_FTileIndexB == TILE_STOP && m_FTileFlagsB == ROTATION_180) || (m_FTileIndexB == TILE_STOPS && (m_FTileFlagsB == ROTATION_0 || m_FTileFlagsB == ROTATION_180)) || (m_FTileIndexB == TILE_STOPA) || (m_FTileFIndex == TILE_STOP && m_FTileFFlags == ROTATION_180) || (m_FTileFIndexB == TILE_STOP && m_FTileFFlagsB == ROTATION_180) || (m_FTileFIndexB == TILE_STOPS && (m_FTileFFlagsB == ROTATION_0 || m_FTileFFlagsB == ROTATION_180)) || (m_FTileFIndexB == TILE_STOPA) || (m_FTileSIndex == TILE_STOP && m_FTileSFlags == ROTATION_180) || (m_FTileSIndexB == TILE_STOP && m_FTileSFlagsB == ROTATION_180) || (m_FTileSIndexB == TILE_STOPS && (m_FTileSFlagsB == ROTATION_0 || m_FTileSFlagsB == ROTATION_180)) || (m_FTileSIndexB == TILE_STOPA)))
-					Temp.y = 0;
-				if(Temp.y > 0 && ((m_FTileIndex == TILE_STOP && m_FTileFlags == ROTATION_0) || (m_FTileIndexT == TILE_STOP && m_FTileFlagsT == ROTATION_0) || (m_FTileIndexT == TILE_STOPS && (m_FTileFlagsT == ROTATION_0 || m_FTileFlagsT == ROTATION_180)) || (m_FTileIndexT == TILE_STOPA) || (m_FTileFIndex == TILE_STOP && m_FTileFFlags == ROTATION_0) || (m_FTileFIndexT == TILE_STOP && m_FTileFFlagsT == ROTATION_0) || (m_FTileFIndexT == TILE_STOPS && (m_FTileFFlagsT == ROTATION_0 || m_FTileFFlagsT == ROTATION_180)) || (m_FTileFIndexT == TILE_STOPA) || (m_FTileSIndex == TILE_STOP && m_FTileSFlags == ROTATION_0) || (m_FTileSIndexT == TILE_STOP && m_FTileSFlagsT == ROTATION_0) || (m_FTileSIndexT == TILE_STOPS && (m_FTileSFlagsT == ROTATION_0 || m_FTileSFlagsT == ROTATION_180)) || (m_FTileSIndexT == TILE_STOPA)))
-					Temp.y = 0;*/
 	
 				m_UFlagVel = Temp;
 
diff --git a/src/game/mapitems.h b/src/game/mapitems.h
index e8b44bc..ae62cb4 100644
--- a/src/game/mapitems.h
+++ b/src/game/mapitems.h
@@ -92,7 +92,7 @@ enum
 	NUM_ENTITIES,
 	//Start From Top Left
 	//Tile Controllers
-	TILE_AIR=0,
+	TILE_AIR = 0,
 	TILE_SOLID,
 	TILE_DEATH,
 	TILE_NOHOOK,
@@ -130,10 +130,12 @@ enum
 	TILE_STOP = 60,
 	TILE_STOPS,
 	TILE_STOPA,
-	TILE_TELECHECKINEVIL = 63,
-	TILE_CP = 64,
+	TILE_TELECHECKINEVIL,
+	TILE_CP,
 	TILE_CP_F,
-	TILE_TUNE1 = 68,
+	TILE_THROUGH_ALL,
+	TILE_THROUGH_DIR,
+	TILE_TUNE1,
 	TILE_OLDLASER = 71,
 	TILE_NPC,
 	TILE_EHOOK,
diff --git a/src/game/server/ddracechat.cpp b/src/game/server/ddracechat.cpp
index 31da48c..1e0bfe4 100644
--- a/src/game/server/ddracechat.cpp
+++ b/src/game/server/ddracechat.cpp
@@ -6355,7 +6355,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 
 		if (pResult->NumArguments() != 2)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "'/ascii profile <0/1>' private/publish animation on profile");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Type '/ascii profile <0/1>' to private/publish animation on yourprofile");
 			return;
 		}
 
@@ -6368,7 +6368,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 			else
 			{
 				pSelf->SendChatTarget(pResult->m_ClientID, "Your animation is now private.");
-				pSelf->SendChatTarget(pResult->m_ClientID, "It can be no longer watched with '/profile view <you>'");
+				pSelf->SendChatTarget(pResult->m_ClientID, "It can no longer be viewed with '/profile view <you>'");
 				pPlayer->m_aAsciiPublishState[1] = '0';
 			}
 		}
@@ -6381,7 +6381,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 			else
 			{
 				pSelf->SendChatTarget(pResult->m_ClientID, "Your animation is now public.");
-				pSelf->SendChatTarget(pResult->m_ClientID, "It can be watched with '/profile view <you>'");
+				pSelf->SendChatTarget(pResult->m_ClientID, "It can be viewed with '/profile view <you>'");
 				pPlayer->m_aAsciiPublishState[1] = '1';
 			}
 		}
@@ -6402,7 +6402,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 
 		if (pResult->NumArguments() != 2)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "'/ascii public <0/1>' private/publish animation");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Type '/ascii public <0/1>' to private/publish animation");
 			return;
 		}
 
@@ -6415,7 +6415,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 			else
 			{
 				pSelf->SendChatTarget(pResult->m_ClientID, "Your animation is now private.");
-				pSelf->SendChatTarget(pResult->m_ClientID, "It can be no longer watched with '/ascii view <your id>'");
+				pSelf->SendChatTarget(pResult->m_ClientID, "It can no longer be viewed with '/ascii view <your id>'");
 				pPlayer->m_aAsciiPublishState[0] = '0';
 			}
 		}
@@ -6428,7 +6428,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 			else
 			{
 				pSelf->SendChatTarget(pResult->m_ClientID, "Your animation is now public.");
-				pSelf->SendChatTarget(pResult->m_ClientID, "It can be watched with '/ascii view <your id>'");
+				pSelf->SendChatTarget(pResult->m_ClientID, "It can be viewed with '/ascii view <your id>'");
 				pPlayer->m_aAsciiPublishState[0] = '1';
 			}
 		}
@@ -6449,7 +6449,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 
 		if (pResult->NumArguments() < 2)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "'/ascii frame <frame number> <ascii art>' to edit a frame from 0-15");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Type '/ascii frame <frame number> <ascii art>' to edit a frame from 0-15");
 			return;
 		}
 
@@ -6567,7 +6567,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 		}
 		else
 		{
-			str_format(aBuf, sizeof(aBuf), "%d is not a valid frame. choose between 0 and 15");
+			str_format(aBuf, sizeof(aBuf), "'%d' is no valid frame. Choose between 0 and 15.");
 			pSelf->SendChatTarget(pResult->m_ClientID, aBuf);
 		}
 	}
@@ -6592,7 +6592,7 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 
 		if (pResult->NumArguments() != 2)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "'/ascii speed <speed>' to change the animation speed");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Type '/ascii speed <speed>' to change the animation's speed");
 			return;
 		}
 		if (pResult->GetInteger(1) < 1)
@@ -6602,11 +6602,11 @@ void CGameContext::ConAscii(IConsole::IResult *pResult, void *pUserData)
 		}
 
 		pPlayer->m_AsciiAnimSpeed = pResult->GetInteger(1);
-		pSelf->SendChatTarget(pResult->m_ClientID, "updated animation speed.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "Updated animation speed.");
 	}
 	else
 	{
-		pSelf->SendChatTarget(pResult->m_ClientID, "Unknown ascii command check '/ascii' for command list.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "Unknown ascii command. Type '/ascii' for command list.");
 	}
 }
 
@@ -6653,7 +6653,7 @@ void CGameContext::ConHook(IConsole::IResult *pResult, void *pUserData)
 		}
 		else
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "missing permission.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Missing permission.");
 		}
 	}
 	else if (!str_comp_nocase(pResult->GetString(0), "bloody"))
@@ -6665,12 +6665,12 @@ void CGameContext::ConHook(IConsole::IResult *pResult, void *pUserData)
 		}
 		else
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "missing permission.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Missing permission.");
 		}
 	}
 	else
 	{
-		pSelf->SendChatTarget(pResult->m_ClientID, "unknown power check '/hook' for a list of all powers.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "Unknown power. Type '/hook' for a list of all powers.");
 	}
 }
 
@@ -6693,7 +6693,7 @@ void CGameContext::ConReport(IConsole::IResult *pResult, void *pUserData)
 	{
 		pSelf->SendChatTarget(pResult->m_ClientID, "---- Report ----");
 		pSelf->SendChatTarget(pResult->m_ClientID, "'/report <reason> <player>'");
-		pSelf->SendChatTarget(pResult->m_ClientID, "--- reasons ---");
+		pSelf->SendChatTarget(pResult->m_ClientID, "--- Reasons ---");
 		pSelf->SendChatTarget(pResult->m_ClientID, "spawnblock, aimbot, flybot, spinbot, chat-spam, chat-insult");
 		return;
 	}
@@ -6797,24 +6797,24 @@ void CGameContext::ConShow(IConsole::IResult *pResult, void *pUserData)
 	{
 		if (!pPlayer->m_xpmsg)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "xp messages are now activated.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "XP-messages are now activated.");
 			pPlayer->m_xpmsg = true;
 		}
 		else
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "xp messages are already activated.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "XP-messages are already activated.");
 		}
 	}
 	else if (!str_comp_nocase(pResult->GetString(0), "jail"))
 	{
 		if (pPlayer->m_hidejailmsg)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "jail messages are now shown.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Jail-messages are now shown.");
 			pPlayer->m_hidejailmsg = false;
 		}
 		else
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "jail messages are already shown.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Jail-messages are already shown.");
 		}
 	}
 	else
@@ -6876,24 +6876,24 @@ void CGameContext::ConHide(IConsole::IResult *pResult, void *pUserData)
 	{
 		if (pPlayer->m_xpmsg)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "xp messages are now hidden.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "XP-messages are now hidden.");
 			pPlayer->m_xpmsg = false;
 		}
 		else
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "xp messages are already hidden.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "XP-messages are already hidden.");
 		}
 	}
 	else if (!str_comp_nocase(pResult->GetString(0), "jail"))
 	{
 		if (!pPlayer->m_hidejailmsg)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "jail messages are now hidden.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Jail-messages are now hidden.");
 			pPlayer->m_hidejailmsg = true;
 		}
 		else
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "jail messages are already hidden.");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Jail-messages are already hidden.");
 		}
 	}
 	else
@@ -6951,22 +6951,22 @@ void CGameContext::ConQuest(IConsole::IResult * pResult, void * pUserData)
 			}
 			if (pPlayer->m_QuestFailed)
 			{
-				pSelf->SendChatTarget(pResult->m_ClientID, "WARNING Quest is failed. Start agian.");
+				pSelf->SendChatTarget(pResult->m_ClientID, "WARNING: Quest has failed. Start agian.");
 			}
 		}
 		pSelf->SendChatTarget(pResult->m_ClientID, "========================");
-		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest help' for more help.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest help' for more info.");
 		return;
 	}
 
 	if (!str_comp_nocase(pResult->GetString(0), "help") || !str_comp_nocase(pResult->GetString(0), "info") || !str_comp_nocase(pResult->GetString(0), "cmdlist") || !str_comp_nocase(pResult->GetString(0), "man") || !str_comp_nocase(pResult->GetString(0), "?"))
 	{
 		pSelf->SendChatTarget(pResult->m_ClientID, "====== Q U E S T =====");
-		pSelf->SendChatTarget(pResult->m_ClientID, "Complete quests and get rewards c:");
+		pSelf->SendChatTarget(pResult->m_ClientID, "Complete quests and get rewards.");
 		pSelf->SendChatTarget(pResult->m_ClientID, "==== commands ====");
-		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest' to get quest status");
-		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest start' to start a quest");
-		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest stop' to stop a quest");
+		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest' to get quest status.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest start' to start a quest.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "'/quest stop' to stop a quest.");
 		//pSelf->SendChatTarget(pResult->m_ClientID, "'/quest skip' to skip a quest");
 		//pSelf->SendChatTarget(pResult->m_ClientID, "'/quest level' to change difficulty");
 	}
@@ -6974,7 +6974,7 @@ void CGameContext::ConQuest(IConsole::IResult * pResult, void * pUserData)
 	{
 		if (pPlayer->m_QuestState)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "quest already running");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Quest is already running.");
 			return;
 		}
 		//load / activate QuestState
@@ -6996,13 +6996,13 @@ void CGameContext::ConQuest(IConsole::IResult * pResult, void * pUserData)
 	{
 		if (!pPlayer->m_QuestState)
 		{
-			pSelf->SendChatTarget(pResult->m_ClientID, "quest already stopped");
+			pSelf->SendChatTarget(pResult->m_ClientID, "Quest already stopped.");
 			return;
 		}
 
 		pPlayer->m_QuestState = 0;
 		pPlayer->m_QuestStateLevel = 0;
-		pSelf->SendChatTarget(pResult->m_ClientID, "quest stopped.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "Quest stopped.");
 	}
 	//else if (!str_comp_nocase(pResult->GetString(0), "level"))
 	//{
@@ -7024,6 +7024,6 @@ void CGameContext::ConQuest(IConsole::IResult * pResult, void * pUserData)
 	//}
 	else
 	{
-		pSelf->SendChatTarget(pResult->m_ClientID, "Unknown quest command check '/quest help' for more help.");
+		pSelf->SendChatTarget(pResult->m_ClientID, "Unknown quest command. Type '/quest help' for more info.");
 	}
 }
\ No newline at end of file
diff --git a/src/game/server/entities/character.cpp b/src/game/server/entities/character.cpp
index 4a13e51..d088c43 100644
--- a/src/game/server/entities/character.cpp
+++ b/src/game/server/entities/character.cpp
@@ -2215,13 +2215,11 @@ void CCharacter::HandleTiles(int Index)
 #endif
 	CGameControllerDDRace* Controller = (CGameControllerDDRace*)GameServer()->m_pController;
 	int MapIndex = Index;
-	//int PureMapIndex = GameServer()->Collision()->GetPureMapIndex(m_Pos);
 	float Offset = 4.0f;
 	int MapIndexL = GameServer()->Collision()->GetPureMapIndex(vec2(m_Pos.x + (m_ProximityRadius / 2) + Offset, m_Pos.y));
 	int MapIndexR = GameServer()->Collision()->GetPureMapIndex(vec2(m_Pos.x - (m_ProximityRadius / 2) - Offset, m_Pos.y));
 	int MapIndexT = GameServer()->Collision()->GetPureMapIndex(vec2(m_Pos.x, m_Pos.y + (m_ProximityRadius / 2) + Offset));
 	int MapIndexB = GameServer()->Collision()->GetPureMapIndex(vec2(m_Pos.x, m_Pos.y - (m_ProximityRadius / 2) - Offset));
-	//dbg_msg("","N%d L%d R%d B%d T%d",MapIndex,MapIndexL,MapIndexR,MapIndexB,MapIndexT);
 	m_TileIndex = GameServer()->Collision()->GetTileIndex(MapIndex);
 	m_TileFlags = GameServer()->Collision()->GetTileFlags(MapIndex);
 	m_TileIndexL = GameServer()->Collision()->GetTileIndex(MapIndexL);
diff --git a/src/game/server/entities/gun.cpp b/src/game/server/entities/gun.cpp
index 12035e2..a004700 100644
--- a/src/game/server/entities/gun.cpp
+++ b/src/game/server/entities/gun.cpp
@@ -45,17 +45,17 @@ void CGun::Fire()
 	}
 
 	int Num = -1;
-	Num =  GameServer()->m_World.FindEntities(m_Pos, g_Config.m_SvPlasmaRange, (CEntity**)Ents, MAX_CLIENTS, CGameWorld::ENTTYPE_CHARACTER);
+	Num = GameServer()->m_World.FindEntities(m_Pos, g_Config.m_SvPlasmaRange, (CEntity**)Ents, MAX_CLIENTS, CGameWorld::ENTTYPE_CHARACTER);
 
 	for (int i = 0; i < Num; i++)
 	{
 		CCharacter *Target = Ents[i];
 		//now gun doesn't affect on super
-		if(Target->Team() == TEAM_SUPER)
+		if (Target->Team() == TEAM_SUPER)
 			continue;
-		if(m_Layer == LAYER_SWITCH && !GameServer()->Collision()->m_pSwitchers[m_Number].m_Status[Target->Team()])
+		if (m_Layer == LAYER_SWITCH && !GameServer()->Collision()->m_pSwitchers[m_Number].m_Status[Target->Team()])
 			continue;
-		int res = GameServer()->Collision()->IntersectLine(m_Pos, Target->m_Pos,0,0,false);
+		int res = GameServer()->Collision()->IntersectLine(m_Pos, Target->m_Pos, 0, 0);
 		if (!res)
 		{
 			int Len = length(Target->m_Pos - m_Pos);
@@ -68,7 +68,7 @@ void CGun::Fire()
 	}
 	for (int i = 0; i < MAX_CLIENTS; i++)
 	{
-		if(IdInTeam[i] != -1)
+		if (IdInTeam[i] != -1)
 		{
 			CCharacter *Target = Ents[IdInTeam[i]];
 			new CPlasma(&GameServer()->m_World, m_Pos, normalize(Target->m_Pos - m_Pos), m_Freeze, m_Explosive, i);
@@ -82,7 +82,7 @@ void CGun::Fire()
 		{
 			if (IdInTeam[Target->Team()] != i)
 			{
-				int res = GameServer()->Collision()->IntersectLine(m_Pos, Target->m_Pos,0,0,false);
+				int res = GameServer()->Collision()->IntersectLine(m_Pos, Target->m_Pos, 0, 0);
 				if (!res)
 				{
 					new CPlasma(&GameServer()->m_World, m_Pos, normalize(Target->m_Pos - m_Pos), m_Freeze, m_Explosive, Target->Team());
diff --git a/src/game/server/entities/laser.cpp b/src/game/server/entities/laser.cpp
index 665b25f..b5d2d13 100644
--- a/src/game/server/entities/laser.cpp
+++ b/src/game/server/entities/laser.cpp
@@ -310,7 +310,7 @@ void CLaser::DoBounce()
 #endif
 	m_EvalTick = Server()->Tick();
 
-	if(m_Energy < 0)
+	if (m_Energy < 0)
 	{
 		GameServer()->m_World.DestroyEntity(this);
 		return;
@@ -325,16 +325,16 @@ void CLaser::DoBounce()
 	{
 		m_PrevPos = m_TelePos;
 		m_Pos = m_TelePos;
-		m_TelePos = vec2(0,0);
+		m_TelePos = vec2(0, 0);
 	}
 
 	vec2 To = m_Pos + m_Dir * m_Energy;
 
-	Res = GameServer()->Collision()->IntersectLineTeleWeapon(m_Pos, To, &Coltile, &To, &z, false);
+	Res = GameServer()->Collision()->IntersectLineTeleWeapon(m_Pos, To, &Coltile, &To, &z);
 
-	if(Res)
+	if (Res)
 	{
-		if(!HitCharacter(m_Pos, To))
+		if (!HitCharacter(m_Pos, To))
 		{
 			// intersected
 			m_From = m_Pos;
@@ -344,13 +344,13 @@ void CLaser::DoBounce()
 			vec2 TempDir = m_Dir * 4.0f;
 
 			int f = 0;
-			if(Res == -1)
+			if (Res == -1)
 			{
 				f = GameServer()->Collision()->GetTile(round_to_int(Coltile.x), round_to_int(Coltile.y));
-				GameServer()->Collision()->SetCollisionAt(round_to_int(Coltile.x), round_to_int(Coltile.y), CCollision::COLFLAG_SOLID);
+				GameServer()->Collision()->SetCollisionAt(round_to_int(Coltile.x), round_to_int(Coltile.y), TILE_SOLID);
 			}
 			GameServer()->Collision()->MovePoint(&TempPos, &TempDir, 1.0f, 0);
-			if(Res == -1)
+			if (Res == -1)
 			{
 				GameServer()->Collision()->SetCollisionAt(round_to_int(Coltile.x), round_to_int(Coltile.y), f);
 			}
@@ -362,10 +362,10 @@ void CLaser::DoBounce()
 			else
 				m_Energy -= distance(m_From, m_Pos) + GameServer()->TuningList()[m_TuneZone].m_LaserBounceCost;
 
-			if (Res&CCollision::COLFLAG_TELE && ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z-1].size())
+			if (Res == TILE_TELEINWEAPON && ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z - 1].size())
 			{
-				int Num = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z-1].size();
-				m_TelePos = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z-1][(!Num)?Num:rand() % Num];
+				int Num = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z - 1].size();
+				m_TelePos = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z - 1][(!Num) ? Num : rand() % Num];
 				m_WasTele = true;
 			}
 			else
@@ -378,7 +378,7 @@ void CLaser::DoBounce()
 			if (m_TuneZone)
 				BounceNum = GameServer()->TuningList()[m_TuneZone].m_LaserBounceNum;
 
-			if(m_Bounces > BounceNum)
+			if (m_Bounces > BounceNum)
 				m_Energy = -1;
 
 			GameServer()->CreateSound(m_Pos, SOUND_RIFLE_BOUNCE, m_TeamMask);
@@ -386,7 +386,7 @@ void CLaser::DoBounce()
 	}
 	else
 	{
-		if(!HitCharacter(m_Pos, To))
+		if (!HitCharacter(m_Pos, To))
 		{
 			m_From = m_Pos;
 			m_Pos = To;
diff --git a/src/game/server/entities/projectile.cpp b/src/game/server/entities/projectile.cpp
index 40bebc6..f5b6eb7 100644
--- a/src/game/server/entities/projectile.cpp
+++ b/src/game/server/entities/projectile.cpp
@@ -120,36 +120,36 @@ void CProjectile::Tick()
 #if defined(CONF_DEBUG)
 	CALL_STACK_ADD();
 #endif
-	float Pt = (Server()->Tick()-m_StartTick-1)/(float)Server()->TickSpeed();
-	float Ct = (Server()->Tick()-m_StartTick)/(float)Server()->TickSpeed();
+	float Pt = (Server()->Tick() - m_StartTick - 1) / (float)Server()->TickSpeed();
+	float Ct = (Server()->Tick() - m_StartTick) / (float)Server()->TickSpeed();
 	vec2 PrevPos = GetPos(Pt);
 	vec2 CurPos = GetPos(Ct);
 	vec2 ColPos;
 	vec2 NewPos;
-	int Collide = GameServer()->Collision()->IntersectLine(PrevPos, CurPos, &ColPos, &NewPos, false);
+	int Collide = GameServer()->Collision()->IntersectLine(PrevPos, CurPos, &ColPos, &NewPos);
 	CCharacter *pOwnerChar = 0;
 
-	if(m_Owner >= 0)
+	if (m_Owner >= 0)
 		pOwnerChar = GameServer()->GetPlayerChar(m_Owner);
 
 	CCharacter *pTargetChr = GameServer()->m_World.IntersectCharacter(PrevPos, ColPos, m_Freeze ? 1.0f : 6.0f, ColPos, pOwnerChar, m_Owner);
 
-	if(m_LifeSpan > -1)
+	if (m_LifeSpan > -1)
 		m_LifeSpan--;
 
 	int64_t TeamMask = -1LL;
 	bool isWeaponCollide = false;
 	if
-	(
-			pOwnerChar &&
-			pTargetChr &&
-			pOwnerChar->IsAlive() &&
-			pTargetChr->IsAlive() &&
-			!pTargetChr->CanCollide(m_Owner)
-			)
+		(
+		pOwnerChar &&
+		pTargetChr &&
+		pOwnerChar->IsAlive() &&
+		pTargetChr->IsAlive() &&
+		!pTargetChr->CanCollide(m_Owner)
+		)
 	{
-			isWeaponCollide = true;
-			//TeamMask = OwnerChar->Teams()->TeamMask( OwnerChar->Team());
+		isWeaponCollide = true;
+		//TeamMask = OwnerChar->Teams()->TeamMask( OwnerChar->Team());
 	}
 	if (pOwnerChar && pOwnerChar->IsAlive())
 	{
@@ -160,24 +160,24 @@ void CProjectile::Tick()
 		GameServer()->m_World.DestroyEntity(this);
 	}
 
-	if( ((pTargetChr && (pOwnerChar ? !(pOwnerChar->m_Hit&CCharacter::DISABLE_HIT_GRENADE) : g_Config.m_SvHit || m_Owner == -1 || pTargetChr == pOwnerChar)) || Collide || GameLayerClipped(CurPos)) && !isWeaponCollide)
+	if (((pTargetChr && (pOwnerChar ? !(pOwnerChar->m_Hit&CCharacter::DISABLE_HIT_GRENADE) : g_Config.m_SvHit || m_Owner == -1 || pTargetChr == pOwnerChar)) || Collide || GameLayerClipped(CurPos)) && !isWeaponCollide)
 	{
-		if(m_Explosive/*??*/ && (!pTargetChr || (pTargetChr && (!m_Freeze || (m_Weapon == WEAPON_SHOTGUN && Collide)))))
+		if (m_Explosive/*??*/ && (!pTargetChr || (pTargetChr && (!m_Freeze || (m_Weapon == WEAPON_SHOTGUN && Collide)))))
 		{
 			GameServer()->CreateExplosion(ColPos, m_Owner, m_Weapon, m_Owner == -1, (!pTargetChr ? -1 : pTargetChr->Team()),
-			(m_Owner != -1)? TeamMask : -1LL);
+				(m_Owner != -1) ? TeamMask : -1LL);
 			GameServer()->CreateSound(ColPos, m_SoundImpact,
-			(m_Owner != -1)? TeamMask : -1LL);
+				(m_Owner != -1) ? TeamMask : -1LL);
 		}
-		else if(pTargetChr && m_Freeze && ((m_Layer == LAYER_SWITCH && GameServer()->Collision()->m_pSwitchers[m_Number].m_Status[pTargetChr->Team()]) || m_Layer != LAYER_SWITCH))
+		else if (pTargetChr && m_Freeze && ((m_Layer == LAYER_SWITCH && GameServer()->Collision()->m_pSwitchers[m_Number].m_Status[pTargetChr->Team()]) || m_Layer != LAYER_SWITCH))
 			pTargetChr->Freeze();
-		if(Collide && m_Bouncing != 0)
+		if (Collide && m_Bouncing != 0)
 		{
 			m_StartTick = Server()->Tick();
-			m_Pos = NewPos+(-(m_Direction*4));
+			m_Pos = NewPos + (-(m_Direction * 4));
 			if (m_Bouncing == 1)
 				m_Direction.x = -m_Direction.x;
-			else if(m_Bouncing == 2)
+			else if (m_Bouncing == 2)
 				m_Direction.y = -m_Direction.y;
 			if (fabs(m_Direction.x) < 1e-6)
 				m_Direction.x = 0;
@@ -187,30 +187,30 @@ void CProjectile::Tick()
 		}
 		else if (m_Weapon == WEAPON_GUN)
 		{
-			GameServer()->CreateDamageInd(CurPos, -atan2(m_Direction.x, m_Direction.y), 10, (m_Owner != -1)? TeamMask : -1LL);
+			GameServer()->CreateDamageInd(CurPos, -atan2(m_Direction.x, m_Direction.y), 10, (m_Owner != -1) ? TeamMask : -1LL);
 			GameServer()->m_World.DestroyEntity(this);
 		}
 		else
 			if (!m_Freeze)
 				GameServer()->m_World.DestroyEntity(this);
 	}
-	if(m_LifeSpan == -1)
+	if (m_LifeSpan == -1)
 	{
-		if(m_Explosive)
+		if (m_Explosive)
 		{
-			if(m_Owner >= 0)
+			if (m_Owner >= 0)
 				pOwnerChar = GameServer()->GetPlayerChar(m_Owner);
 
 			int64_t TeamMask = -1LL;
 			if (pOwnerChar && pOwnerChar->IsAlive())
 			{
-					TeamMask = pOwnerChar->Teams()->TeamMask(pOwnerChar->Team(), -1, m_Owner);
+				TeamMask = pOwnerChar->Teams()->TeamMask(pOwnerChar->Team(), -1, m_Owner);
 			}
 
 			GameServer()->CreateExplosion(ColPos, m_Owner, m_Weapon, m_Owner == -1, (!pOwnerChar ? -1 : pOwnerChar->Team()),
-			(m_Owner != -1)? TeamMask : -1LL);
+				(m_Owner != -1) ? TeamMask : -1LL);
 			GameServer()->CreateSound(ColPos, m_SoundImpact,
-			(m_Owner != -1)? TeamMask : -1LL);
+				(m_Owner != -1) ? TeamMask : -1LL);
 		}
 		GameServer()->m_World.DestroyEntity(this);
 	}
@@ -221,10 +221,10 @@ void CProjectile::Tick()
 		z = GameServer()->Collision()->IsTeleport(x);
 	else
 		z = GameServer()->Collision()->IsTeleportWeapon(x);
-	if (z && ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z-1].size())
+	if (z && ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z - 1].size())
 	{
-		int Num = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z-1].size();
-		m_Pos = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z-1][(!Num)?Num:rand() % Num];
+		int Num = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z - 1].size();
+		m_Pos = ((CGameControllerDDRace*)GameServer()->m_pController)->m_TeleOuts[z - 1][(!Num) ? Num : rand() % Num];
 		m_StartTick = Server()->Tick();
 	}
 }
diff --git a/src/game/server/gamecontext.cpp b/src/game/server/gamecontext.cpp
index 1d4ff2f..0c14eab 100644
--- a/src/game/server/gamecontext.cpp
+++ b/src/game/server/gamecontext.cpp
@@ -1712,12 +1712,12 @@ void CGameContext::DDPP_Tick()
 			{
 				if (!m_apPlayers[m_apPlayers[i]->m_QuestPlayerID])
 				{
-					SendChatTarget(i, "[QUEST] looks like your quest destination left the server.");
+					SendChatTarget(i, "[QUEST] Looks like your quest destination left the server.");
 					QuestFailed(i);
 				}
 				else if (m_apPlayers[m_apPlayers[i]->m_QuestPlayerID]->GetTeam() == TEAM_SPECTATORS)
 				{
-					SendChatTarget(i, "[QUEST] looks like your quest destination is a spectator.");
+					SendChatTarget(i, "[QUEST] Looks like your quest destination is a spectator.");
 					QuestFailed(i);
 				}
 			}
@@ -1909,7 +1909,7 @@ void CGameContext::QuestReset(int playerID)
 #endif
 	if (!m_apPlayers[playerID])
 	{
-		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player resettet the quest", playerID, Server()->ClientName(playerID));
+		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player. Quest has been reset.", playerID, Server()->ClientName(playerID));
 		return;
 	}
 	m_apPlayers[playerID]->m_QuestProgressValue = 0;
@@ -1928,16 +1928,16 @@ void CGameContext::QuestFailed(int playerID)
 #endif
 	if (!m_apPlayers[playerID])
 	{
-		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player failed the quest", playerID, Server()->ClientName(playerID));
+		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player failed the quest.", playerID, Server()->ClientName(playerID));
 		return;
 	}
 	if (!m_apPlayers[playerID]->m_QuestState)
 	{
-		dbg_msg("QUEST", "WARNING! [%d][%s] failed a quest without being in a quest", playerID, Server()->ClientName(playerID));
+		dbg_msg("QUEST", "WARNING! [%d][%s] failed a quest without being in a quest.", playerID, Server()->ClientName(playerID));
 		return;
 	}
 	QuestReset(playerID);
-	SendChatTarget(playerID, "[QUEST] you failed the quest.");
+	SendChatTarget(playerID, "[QUEST] You failed the quest.");
 	StartQuest(playerID);
 }
 
@@ -1953,7 +1953,7 @@ void CGameContext::QuestFailed2(int playerID)
 	}
 	if (!m_apPlayers[playerID]->m_QuestState)
 	{
-		dbg_msg("QUEST", "WARNING! [%d][%s] failed a quest without being in a quest", playerID, Server()->ClientName(playerID));
+		dbg_msg("QUEST", "WARNING! [%d][%s] failed a quest without being in a quest.", playerID, Server()->ClientName(playerID));
 		return;
 	}
 	if (m_apPlayers[playerID]->m_QuestFailed)
@@ -1963,7 +1963,7 @@ void CGameContext::QuestFailed2(int playerID)
 	m_apPlayers[playerID]->m_QuestFailed = true;
 	//str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Quest failed."); //dont overwrite info what to do and how to start agian. I added a questfailed info in ddracechat.cpp
 	QuestReset(playerID);
-	SendChatTarget(playerID, "[QUEST] you failed the quest.");
+	SendChatTarget(playerID, "[QUEST] You failed the quest.");
 }
 
 bool CGameContext::QuestAddProgress(int playerID, int globalMAX, int localMAX)
@@ -1974,7 +1974,7 @@ bool CGameContext::QuestAddProgress(int playerID, int globalMAX, int localMAX)
 	char aBuf[256];
 	if (!m_apPlayers[playerID])
 	{
-		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player added progress", playerID, Server()->ClientName(playerID));
+		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player added progress.", playerID, Server()->ClientName(playerID));
 		return false;
 	}
 	if (localMAX == -1)
@@ -2101,7 +2101,7 @@ void CGameContext::StartQuest(int playerID)
 #endif
 	if (!m_apPlayers[playerID])
 	{
-		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player started the quest", playerID, Server()->ClientName(playerID));
+		dbg_msg("QUEST", "WARNING! [%d][%s] invalid player has started the quest.", playerID, Server()->ClientName(playerID));
 		return;
 	}
 
@@ -2113,50 +2113,50 @@ void CGameContext::StartQuest(int playerID)
 
 	if (quest == 0)
 	{
-		dbg_msg("debug", "WARNING: QuestPicker Triggered on non questing player [%d][%s] [QUEST=%d LEVEL=%d]", m_apPlayers[playerID]->GetCID(), Server()->ClientName(m_apPlayers[playerID]->GetCID()), quest, level);
+		dbg_msg("debug", "WARNING: QuestPicker triggered on non-questing player [%d][%s] [QUEST=%d LEVEL=%d]", m_apPlayers[playerID]->GetCID(), Server()->ClientName(m_apPlayers[playerID]->GetCID()), quest, level);
 		return;
 	}
 	else if (quest == 1)
 	{
 		if (level == 0)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer a tee");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 1 tee.");
 		}
 		else if (level == 1)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 2 tees");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 2 tees.");
 		}
 		else if (level == 2)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 3 tees");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 3 tees.");
 		}
 		else if (level == 3)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 5 tees");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 5 tees.");
 		}
 		else if (level == 4)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 10 freezed tees");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 10 freezed tees.");
 		}
 		else if (level == 5)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer '%s' 20 times", Server()->ClientName(PickQuestPlayer(playerID)));
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer '%s' 20 times.", Server()->ClientName(PickQuestPlayer(playerID)));
 		}
 		else if (level == 6)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer freezed '%s' 3 times", Server()->ClientName(PickQuestPlayer(playerID)));
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer freezed '%s' 3 times.", Server()->ClientName(PickQuestPlayer(playerID)));
 		}
 		else if (level == 7)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer '%s' 10 times and then block him", Server()->ClientName(PickQuestPlayer(playerID)));
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer '%s' 10 times and then block him.", Server()->ClientName(PickQuestPlayer(playerID)));
 		}
 		else if (level == 8)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 2 tees in one hit");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 2 tees with one hit.");
 		}
 		else if (level == 9)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 10 freezed tees while holding the flag");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Hammer 10 freezed tees while holding the flag.");
 		}
 		else
 		{
@@ -2168,43 +2168,43 @@ void CGameContext::StartQuest(int playerID)
 	{
 		if (level == 0)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block a tee");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 1 tee.");
 		}
 		else if (level == 1)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 2 tees");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 2 tees.");
 		}
 		else if (level == 2)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 3 tees");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 3 tees.");
 		}
 		else if (level == 3)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 5 tees");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 5 tees.");
 		}
 		else if (level == 4)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 10 tees without using any weapons");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 10 tees without using any weapons.");
 		}
 		else if (level == 5)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 5 tees and then block '%s'", Server()->ClientName(PickQuestPlayer(playerID)));
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 5 tees and then block '%s'.", Server()->ClientName(PickQuestPlayer(playerID)));
 		}
 		else if (level == 6)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block a tee which is on a 5 blockingspree");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block a tee which is on a 5 blockingspree.");
 		}
 		else if (level == 7)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 11 tees without getting blocked");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 11 tees without getting blocked.");
 		}
 		else if (level == 8)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 3 tees without using hook");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 3 tees without using hook.");
 		}
 		else if (level == 9)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 11 tees whithout dieing while holding the flag");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Block 11 tees while holding the flag without dying.");
 		}
 		else
 		{
@@ -2216,65 +2216,65 @@ void CGameContext::StartQuest(int playerID)
 	{
 		if (level == 0)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race.");
 		}
 		else if (level == 1)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race in under %d seconds", g_Config.m_SvQuestRaceTime1);
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race in under %d seconds.", g_Config.m_SvQuestRaceTime1);
 		}
 		else if (level == 2)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race in under %d seconds", g_Config.m_SvQuestRaceTime2); 
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race in under %d seconds.", g_Config.m_SvQuestRaceTime2); 
 		}
 		else if (level == 3)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race backwards"); 
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race backwards."); 
 		}
 		else if (level == 4)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race in under %d seconds", g_Config.m_SvQuestRaceTime2);
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race in under %d seconds.", g_Config.m_SvQuestRaceTime2);
 		}
 		else if (level == 5)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race with the flag"); 
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race with the flag."); 
 		}
 		else if (level == 6)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the special race"); 
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the special race."); 
 		}
 		else if (level == 7)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the special race under %d seconds", g_Config.m_SvQuestSpecialRaceTime); 
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the special race in under %d seconds.", g_Config.m_SvQuestSpecialRaceTime); 
 		}
 		else if (level == 8)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the special race backwards"); 
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the special race backwards."); 
 		}
 		else if (level == 9)
 		{
 			if (g_Config.m_SvQuestRaceCondition == 0)
 			{
-				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using hammer");
+				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using hammer.");
 			}
 			else if (g_Config.m_SvQuestRaceCondition == 1)
 			{
-				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using gun");
+				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using gun.");
 			}
 			else if (g_Config.m_SvQuestRaceCondition == 2)
 			{
-				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using shotgun");
+				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using shotgun.");
 			}
 			else if (g_Config.m_SvQuestRaceCondition == 3)
 			{
-				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using grenade");
+				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using grenade.");
 			}
 			else if (g_Config.m_SvQuestRaceCondition == 4)
 			{
-				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using rifle");
+				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using rifle.");
 			}
 			else if (g_Config.m_SvQuestRaceCondition == 5)
 			{
-				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using ninja");
+				str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Finish the race without using ninja.");
 			}
 			else
 			{
@@ -2292,7 +2292,7 @@ void CGameContext::StartQuest(int playerID)
 	{
 		if (level == 0)
 		{
-			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Rifle a tee");
+			str_format(m_apPlayers[playerID]->m_aQuestString, sizeof(m_apPlayers[playerID]->m_aQuestString), "Rifle 1 tee");
 		}
 		else if (level == 1)
 		{
diff --git a/src/game/server/gamemodes/DDRace.cpp b/src/game/server/gamemodes/DDRace.cpp
index 11ff49a..1a97eaa 100644
--- a/src/game/server/gamemodes/DDRace.cpp
+++ b/src/game/server/gamemodes/DDRace.cpp
@@ -271,7 +271,7 @@ void CGameControllerDDRace::Tick()
 			int Num = GameServer()->m_World.FindEntities(F->m_Pos, CFlag::ms_PhysSize, (CEntity**)apCloseCCharacters, MAX_CLIENTS, CGameWorld::ENTTYPE_CHARACTER);
 			for(int i = 0; i < Num; i++)
 			{
-				if(!apCloseCCharacters[i]->IsAlive() || apCloseCCharacters[i]->GetPlayer()->GetTeam() == TEAM_SPECTATORS || GameServer()->Collision()->IntersectLine(F->m_Pos, apCloseCCharacters[i]->m_Pos, NULL, NULL, true) )
+				if(!apCloseCCharacters[i]->IsAlive() || apCloseCCharacters[i]->GetPlayer()->GetTeam() == TEAM_SPECTATORS || GameServer()->Collision()->IntersectLine(F->m_Pos, apCloseCCharacters[i]->m_Pos, NULL, NULL) )
 					continue;
 				if(m_apFlags[0]->m_pCarryingCharacter == apCloseCCharacters[i] || m_apFlags[1]->m_pCarryingCharacter == apCloseCCharacters[i] || ( F->m_pLastCarryingCharacter == apCloseCCharacters[i] && (F->m_DropFreezeTick + Server()->TickSpeed()*4) > Server()->Tick()) ){
 					continue;
